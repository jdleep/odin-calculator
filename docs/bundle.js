(()=>{"use strict";function t(t,n){switch(t){case 0:return function(){return n.apply(this,arguments)};case 1:return function(t){return n.apply(this,arguments)};case 2:return function(t,r){return n.apply(this,arguments)};case 3:return function(t,r,e){return n.apply(this,arguments)};case 4:return function(t,r,e,u){return n.apply(this,arguments)};case 5:return function(t,r,e,u,o){return n.apply(this,arguments)};case 6:return function(t,r,e,u,o,a){return n.apply(this,arguments)};case 7:return function(t,r,e,u,o,a,i){return n.apply(this,arguments)};case 8:return function(t,r,e,u,o,a,i,c){return n.apply(this,arguments)};case 9:return function(t,r,e,u,o,a,i,c,f){return n.apply(this,arguments)};case 10:return function(t,r,e,u,o,a,i,c,f,l){return n.apply(this,arguments)};default:throw new Error("First argument to _arity must be a non-negative integer no greater than ten")}}function n(t,n){return function(){return n.call(this,t.apply(this,arguments))}}const r={"@@functional/placeholder":!0};function e(t){return t===r}function u(t){return function n(r){return 0===arguments.length||e(r)?n:t.apply(this,arguments)}}function o(t){return function n(r,o){switch(arguments.length){case 0:return n;case 1:return e(r)?n:u((function(n){return t(r,n)}));default:return e(r)&&e(o)?n:e(r)?u((function(n){return t(n,o)})):e(o)?u((function(n){return t(r,n)})):t(r,o)}}}function a(t){return function n(r,a,i){switch(arguments.length){case 0:return n;case 1:return e(r)?n:o((function(n,e){return t(r,n,e)}));case 2:return e(r)&&e(a)?n:e(r)?o((function(n,r){return t(n,a,r)})):e(a)?o((function(n,e){return t(r,n,e)})):u((function(n){return t(r,a,n)}));default:return e(r)&&e(a)&&e(i)?n:e(r)&&e(a)?o((function(n,r){return t(n,r,i)})):e(r)&&e(i)?o((function(n,r){return t(n,a,r)})):e(a)&&e(i)?o((function(n,e){return t(r,n,e)})):e(r)?u((function(n){return t(n,a,i)})):e(a)?u((function(n){return t(r,n,i)})):e(i)?u((function(n){return t(r,a,n)})):t(r,a,i)}}}const i=Array.isArray||function(t){return null!=t&&t.length>=0&&"[object Array]"===Object.prototype.toString.call(t)};function c(t){return"[object String]"===Object.prototype.toString.call(t)}const f=u((function(t){return!!i(t)||!!t&&"object"==typeof t&&!c(t)&&(0===t.length||t.length>0&&t.hasOwnProperty(0)&&t.hasOwnProperty(t.length-1))}));var l="undefined"!=typeof Symbol?Symbol.iterator:"@@iterator";function s(t,n,r){return function(e,u,o){if(f(o))return t(e,u,o);if(null==o)return u;if("function"==typeof o["fantasy-land/reduce"])return n(e,u,o,"fantasy-land/reduce");if(null!=o[l])return r(e,u,o[l]());if("function"==typeof o.next)return r(e,u,o);if("function"==typeof o.reduce)return n(e,u,o,"reduce");throw new TypeError("reduce: list must be array or iterable")}}function p(t,n,r){for(var e=0,u=r.length;e<u;){if((n=t["@@transducer/step"](n,r[e]))&&n["@@transducer/reduced"]){n=n["@@transducer/value"];break}e+=1}return t["@@transducer/result"](n)}const y=o((function(n,r){return t(n.length,(function(){return n.apply(r,arguments)}))}));function g(t,n,r){for(var e=r.next();!e.done;){if((n=t["@@transducer/step"](n,e.value))&&n["@@transducer/reduced"]){n=n["@@transducer/value"];break}e=r.next()}return t["@@transducer/result"](n)}function h(t,n,r,e){return t["@@transducer/result"](r[e](y(t["@@transducer/step"],t),n))}const d=s(p,h,g);var v=function(){function t(t){this.f=t}return t.prototype["@@transducer/init"]=function(){throw new Error("init not implemented on XWrap")},t.prototype["@@transducer/result"]=function(t){return t},t.prototype["@@transducer/step"]=function(t,n){return this.f(t,n)},t}();const b=a((function(t,n,r){return d("function"==typeof t?new v(t):t,n,r)}));function j(t,n){return function(){var r=arguments.length;if(0===r)return n();var e=arguments[r-1];return i(e)||"function"!=typeof e[t]?n.apply(this,arguments):e[t].apply(e,Array.prototype.slice.call(arguments,0,r-1))}}const m=u(j("tail",a(j("slice",(function(t,n,r){return Array.prototype.slice.call(r,t,n)})))(1,1/0)));function S(){if(0===arguments.length)throw new Error("pipe requires at least one argument");return t(arguments[0].length,b(n,arguments[0],m(arguments)))}function O(t,n,r){for(var e=0,u=r.length;e<u;)n=t(n,r[e]),e+=1;return n}function x(t,n,r){return function(){if(0===arguments.length)return r();var e=arguments[arguments.length-1];if(!i(e)){for(var u=0;u<t.length;){if("function"==typeof e[t[u]])return e[t[u]].apply(e,Array.prototype.slice.call(arguments,0,-1));u+=1}if(function(t){return null!=t&&"function"==typeof t["@@transducer/step"]}(e))return n.apply(null,Array.prototype.slice.call(arguments,0,-1))(e)}return r.apply(this,arguments)}}function A(t,n){for(var r=0,e=n.length,u=Array(e);r<e;)u[r]=t(n[r]),r+=1;return u}const w=function(){return this.xf["@@transducer/init"]()},N=function(t){return this.xf["@@transducer/result"](t)};var C=function(){function t(t,n){this.xf=n,this.f=t}return t.prototype["@@transducer/init"]=w,t.prototype["@@transducer/result"]=N,t.prototype["@@transducer/step"]=function(t,n){return this.xf["@@transducer/step"](t,this.f(n))},t}();const k=function(t){return function(n){return new C(t,n)}};function F(n,r,u){return function(){for(var o=[],a=0,i=n,c=0,f=!1;c<r.length||a<arguments.length;){var l;c<r.length&&(!e(r[c])||a>=arguments.length)?l=r[c]:(l=arguments[a],a+=1),o[c]=l,e(l)?f=!0:i-=1,c+=1}return!f&&i<=0?u.apply(this,o):t(Math.max(0,i),F(n,o,u))}}const q=o((function(n,r){return 1===n?u(r):t(n,F(n,[],r))}));function E(t,n){return Object.prototype.hasOwnProperty.call(n,t)}var T=Object.prototype.toString;const U=function(){return"[object Arguments]"===T.call(arguments)?function(t){return"[object Arguments]"===T.call(t)}:function(t){return E("callee",t)}}();var I=!{toString:null}.propertyIsEnumerable("toString"),P=["constructor","valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],M=function(){return arguments.propertyIsEnumerable("length")}(),V=function(t,n){for(var r=0;r<t.length;){if(t[r]===n)return!0;r+=1}return!1};const z="function"!=typeof Object.keys||M?u((function(t){if(Object(t)!==t)return[];var n,r,e=[],u=M&&U(t);for(n in t)!E(n,t)||u&&"length"===n||(e[e.length]=n);if(I)for(r=P.length-1;r>=0;)E(n=P[r],t)&&!V(e,n)&&(e[e.length]=n),r-=1;return e})):u((function(t){return Object(t)!==t?[]:Object.keys(t)})),B=o(x(["fantasy-land/map","map"],k,(function(t,n){switch(Object.prototype.toString.call(n)){case"[object Function]":return q(n.length,(function(){return t.call(this,n.apply(this,arguments))}));case"[object Object]":return O((function(r,e){return r[e]=t(n[e]),r}),{},z(n));default:return A(t,n)}})));function D(t){for(var n,r=[];!(n=t.next()).done;)r.push(n.value);return r}function L(t,n,r){for(var e=0,u=r.length;e<u;){if(t(n,r[e]))return!0;e+=1}return!1}const H="function"==typeof Object.is?Object.is:function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n},R=u((function(t){return null===t?"Null":void 0===t?"Undefined":Object.prototype.toString.call(t).slice(8,-1)}));function $(t,n,r,e){var u=D(t);function o(t,n){return W(t,n,r.slice(),e.slice())}return!L((function(t,n){return!L(o,n,t)}),D(n),u)}function W(t,n,r,e){if(H(t,n))return!0;var u,o,a=R(t);if(a!==R(n))return!1;if("function"==typeof t["fantasy-land/equals"]||"function"==typeof n["fantasy-land/equals"])return"function"==typeof t["fantasy-land/equals"]&&t["fantasy-land/equals"](n)&&"function"==typeof n["fantasy-land/equals"]&&n["fantasy-land/equals"](t);if("function"==typeof t.equals||"function"==typeof n.equals)return"function"==typeof t.equals&&t.equals(n)&&"function"==typeof n.equals&&n.equals(t);switch(a){case"Arguments":case"Array":case"Object":if("function"==typeof t.constructor&&"Promise"===(u=t.constructor,null==(o=String(u).match(/^function (\w*)/))?"":o[1]))return t===n;break;case"Boolean":case"Number":case"String":if(typeof t!=typeof n||!H(t.valueOf(),n.valueOf()))return!1;break;case"Date":if(!H(t.valueOf(),n.valueOf()))return!1;break;case"Error":return t.name===n.name&&t.message===n.message;case"RegExp":if(t.source!==n.source||t.global!==n.global||t.ignoreCase!==n.ignoreCase||t.multiline!==n.multiline||t.sticky!==n.sticky||t.unicode!==n.unicode)return!1}for(var i=r.length-1;i>=0;){if(r[i]===t)return e[i]===n;i-=1}switch(a){case"Map":return t.size===n.size&&$(t.entries(),n.entries(),r.concat([t]),e.concat([n]));case"Set":return t.size===n.size&&$(t.values(),n.values(),r.concat([t]),e.concat([n]));case"Arguments":case"Array":case"Object":case"Boolean":case"Number":case"String":case"Date":case"Error":case"RegExp":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"ArrayBuffer":break;default:return!1}var c=z(t);if(c.length!==z(n).length)return!1;var f=r.concat([t]),l=e.concat([n]);for(i=c.length-1;i>=0;){var s=c[i];if(!E(s,n)||!W(n[s],t[s],f,l))return!1;i-=1}return!0}const X=o((function(t,n){return W(t,n,[],[])}));function Y(t){return'"'+t.replace(/\\/g,"\\\\").replace(/[\b]/g,"\\b").replace(/\f/g,"\\f").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\t/g,"\\t").replace(/\v/g,"\\v").replace(/\0/g,"\\0").replace(/"/g,'\\"')+'"'}var Z=function(t){return(t<10?"0":"")+t};const _="function"==typeof Date.prototype.toISOString?function(t){return t.toISOString()}:function(t){return t.getUTCFullYear()+"-"+Z(t.getUTCMonth()+1)+"-"+Z(t.getUTCDate())+"T"+Z(t.getUTCHours())+":"+Z(t.getUTCMinutes())+":"+Z(t.getUTCSeconds())+"."+(t.getUTCMilliseconds()/1e3).toFixed(3).slice(2,5)+"Z"};var G=function(){function t(t,n){this.xf=n,this.f=t}return t.prototype["@@transducer/init"]=w,t.prototype["@@transducer/result"]=N,t.prototype["@@transducer/step"]=function(t,n){return this.f(n)?this.xf["@@transducer/step"](t,n):t},t}();function J(t){return function(n){return new G(t,n)}}const K=o(x(["fantasy-land/filter","filter"],J,(function(t,n){return r=n,"[object Object]"===Object.prototype.toString.call(r)?O((function(r,e){return t(n[e])&&(r[e]=n[e]),r}),{},z(n)):function(t,n){for(var r=0,e=n.length,u=[];r<e;)t(n[r])&&(u[u.length]=n[r]),r+=1;return u}(t,n);var r}))),Q=o((function(t,n){return K((r=t,function(){return!r.apply(this,arguments)}),n);var r}));function tt(t,n){var r=function(r){var e=n.concat([t]);return function(t,n,r){var e,u;if("function"==typeof t.indexOf)switch(typeof n){case"number":if(0===n){for(e=1/n;r<t.length;){if(0===(u=t[r])&&1/u===e)return r;r+=1}return-1}if(n!=n){for(;r<t.length;){if("number"==typeof(u=t[r])&&u!=u)return r;r+=1}return-1}return t.indexOf(n,r);case"string":case"boolean":case"function":case"undefined":return t.indexOf(n,r);case"object":if(null===n)return t.indexOf(n,r)}for(;r<t.length;){if(X(t[r],n))return r;r+=1}return-1}(e,r,0)>=0?"<Circular>":tt(r,e)},e=function(t,n){return A((function(n){return Y(n)+": "+r(t[n])}),n.slice().sort())};switch(Object.prototype.toString.call(t)){case"[object Arguments]":return"(function() { return arguments; }("+A(r,t).join(", ")+"))";case"[object Array]":return"["+A(r,t).concat(e(t,Q((function(t){return/^\d+$/.test(t)}),z(t)))).join(", ")+"]";case"[object Boolean]":return"object"==typeof t?"new Boolean("+r(t.valueOf())+")":t.toString();case"[object Date]":return"new Date("+(isNaN(t.valueOf())?r(NaN):Y(_(t)))+")";case"[object Map]":return"new Map("+r(Array.from(t))+")";case"[object Null]":return"null";case"[object Number]":return"object"==typeof t?"new Number("+r(t.valueOf())+")":1/t==-1/0?"-0":t.toString(10);case"[object Set]":return"new Set("+r(Array.from(t).sort())+")";case"[object String]":return"object"==typeof t?"new String("+r(t.valueOf())+")":Y(t);case"[object Undefined]":return"undefined";default:if("function"==typeof t.toString){var u=t.toString();if("[object Object]"!==u)return u}return"{"+e(t,z(t)).join(", ")+"}"}}const nt=u((function(t){return tt(t,[])})),rt=o((function(t,n){if(t===n)return n;function r(t,n){if(t>n!=n>t)return n>t?n:t}var e=r(t,n);if(void 0!==e)return e;var u=r(typeof t,typeof n);if(void 0!==u)return u===typeof t?t:n;var o=nt(t),a=r(o,nt(n));return void 0!==a&&a===o?t:n})),et=u((function(n){return t(b(rt,0,B((function(t){return t[0].length}),n)),(function(){for(var t=0;t<n.length;){if(n[t][0].apply(this,arguments))return n[t][1].apply(this,arguments);t+=1}}))})),ut=function(){return!0},ot=u((function(t){return q(t.length,(function(n,r){var e=Array.prototype.slice.call(arguments,0);return e[0]=r,e[1]=n,t.apply(this,e)}))})),at=u((function(t){return null==t}));const it=o((function(t,n){if(0===t.length||at(n))return!1;for(var r=n,e=0;e<t.length;){if(at(r)||!E(t[e],r))return!1;r=r[t[e]],e+=1}return!0})),ct=o((function(t,n){return it([t],n)})),ft=u((function(t){return function(){return t}}));var lt=function(t){return{value:t,"fantasy-land/map":function(){return this}}};const st=o((function(t,n){return t(lt)(n).value})),pt=Number.isInteger||function(t){return(0|t)===t},yt=a((function t(n,r,e){if(0===n.length)return r;var u=n[0];if(n.length>1){var o=!at(e)&&E(u,e)&&"object"==typeof e[u]?e[u]:pt(n[1])?[]:{};r=t(Array.prototype.slice.call(n,1),r,o)}return function(t,n,r){if(pt(t)&&i(r)){var e=[].concat(r);return e[t]=n,e}var u={};for(var o in r)u[o]=r[o];return u[t]=n,u}(u,r,e)})),gt=o((function(t,n){return function(r){return function(e){return B((function(t){return n(t,e)}),r(t(e)))}}})),ht=u((function(t){return gt((function(n){return function(t,n){for(var r,e,u,o=n,a=0;a<t.length;a+=1){if(null==o)return;var i=t[a];pt(i)?(e=o,void 0,u=(r=i)<0?e.length+r:r,o=c(e)?e.charAt(u):e[u]):o=o[i]}return o}(t,n)}),yt(t))})),dt=t=>({storedValue:"0",operator:"",displayValue:"0",isPostCalc:!1});let vt={storedValue:"0",operator:"",displayValue:"0",isPostCalc:!1};const bt=ht(["displayValue"]),jt=ht(["storedValue"]),mt=ht(["isPostCalc"]),St=ht(["operator"]);var Ot=function(t){return{value:t,map:function(n){return Ot(n(t))}}};const xt=a((function(t,n,r){return t((function(t){return Ot(n(t))}))(r).value}));const At=a((function(t,n,r){return xt(t,ft(n),r)}));function wt(t){for(var n,r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];for(var u,o=t,a=r.map((function(t){return"lazy"in t?function(t){var n=t.lazy,r=t.lazyArgs,e=n.apply(void 0,null!=r?r:[]);return Object.assign(e,{isIndexed:n.indexed,isSingle:n.single,index:0,items:[]})}(t):void 0})),i=0;i<r.length;)if(void 0!==a[i]&&("string"==typeof(u=o)||"object"==typeof u&&null!==u&&Symbol.iterator in u)){for(var c=[],f=i;f<r.length;f++){var l=a[f];if(void 0===l)break;if(c.push(l),l.isSingle)break}for(var s=[],p=o[Symbol.iterator]();;){var y=p.next();if(null!==(n=y.done)&&void 0!==n&&n)break;if(Nt(y.value,s,c))break}o=c[c.length-1].isSingle?s[0]:s,i+=c.length}else o=(0,r[i])(o),i+=1;return o}function Nt(t,n,r){var e;if(0===r.length)return n.push(t),!1;for(var u=t,o={done:!1,hasNext:!1},a=!1,i=0;i<r.length;i++){var c=r[i],f=c.isIndexed,l=c.index,s=c.items;if(s.push(u),o=f?c(u,l,s):c(u),c.index+=1,o.hasNext){if(null!==(e=o.hasMany)&&void 0!==e&&e){for(var p=0,y=o.next;p<y.length;p++)if(Nt(y[p],n,r.slice(i+1)))return!0;return!1}u=o.next}if(!o.hasNext)break;o.done&&(a=!0)}return o.hasNext&&n.push(u),!!a}const Ct={"+":(t,n)=>String(parseFloat(t)+parseFloat(n)),"-":(t,n)=>String(parseFloat(t)-parseFloat(n)),"*":(t,n)=>String(parseFloat(t)*parseFloat(n)),"/":(t,n)=>String(parseFloat(t)/parseFloat(n))},kt=t=>At(jt,st(bt,t),t),Ft=t=>{return st(St,t)in Ct?function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return wt.apply(void 0,function(t,n,r){if(r||2===arguments.length)for(var e,u=0,o=n.length;u<o;u++)!e&&u in n||(e||(e=Array.prototype.slice.call(n,0,u)),e[u]=n[u]);return t.concat(e||Array.prototype.slice.call(n))}([n],t,!1))}}(At(mt,!0),(n=Ct[st(St,t)],t=>At(bt,n(st(jt,t),st(bt,t)),t)))(t):t;var n},qt=a((function(t,n,r){return q(Math.max(t.length,n.length,r.length),(function(){return t.apply(this,arguments)?n.apply(this,arguments):r.apply(this,arguments)}))})),Et=o((function(t,n){for(var r in t)if(E(r,t)&&!t[r](n[r]))return!1;return!0})),Tt=o((function(t,n){return Et(B(X,t),n)}));function Ut(t){return t}const It=u(Ut),Pt=(19,t=>t.length>19);const Mt=qt(Tt({isPostCalc:!0}),S(At(mt,!1),At(bt,"0")),It),Vt=t=>n=>S(Mt,xt(bt,(t=>n=>Pt(n)?n:(t=>n=>"0"===n&&(t=>/\d/.test(t))(t)?t:n+t)(t)(n))(t)))(n),zt={"+/-":t=>String(-parseFloat(t)),"%":t=>String(parseFloat(t)/100)},Bt=t=>""===t?"0":t,Dt=t=>n=>n=>st(bt,n).includes(t)?n:Vt(t)(n),Lt=Dt("."),Ht=Dt("e"),Rt=et([[ot(ct)(Ct),t=>n=>S(Ft,At(St,t),kt,At(mt,!0))(n)],[ot(ct)(zt),t=>n=>t in zt?At(bt,zt[t](st(bt,n)),n):n],[t=>/^\d$/.test(t),Vt],[X("="),t=>t=>S(Ft,At(St,""),kt)(t)],[X("A/C"),t=>t=>({storedValue:"0",operator:"",displayValue:"0",isPostCalc:!1})],[X("."),Lt],[X("exp"),Ht],[X("delete"),t=>t=>xt(bt,S((0,-1,function(t){return t.slice(0,-1)}),Bt),t)],[ut,ft((t=>t))]]),$t=t=>"Infinity"===st(bt,t)||"-Infinity"===st(bt,t)||"NaN"===st(bt,t)?S(dt,At(bt,"Error"))(t):t,Wt=t=>"Error"===st(bt,t);let Xt=document.querySelector(".calculator");Xt.addEventListener("click",(t=>{t.target&&t.target instanceof HTMLElement&&"BUTTON"===t.target.tagName&&S(et([[Wt,dt],[ut,S(Rt(t.target.innerText),$t)]]),(t=>n=>(Object.assign(t,n),t))(vt),(t=>n=>{let r=t.querySelector(".calculated-value");return r&&(r.innerText=st(bt,n)),n})(Xt))(vt)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,